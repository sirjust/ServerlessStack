# NOTE: update this with your service name
service: jlm-notes-app-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: local
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.

  # these environment variables are made available to our functions under process.env
  environment:
    tableName: notes
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # 'iamRoleStatements' defines permission policy for the lambda function
  # Here lambda functions are granted with permissions to access DynamoDB
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:171721194051:table/notes"

functions:
  # defines an HTTP API endpoint that calls the main function in create.js
  # path: url path is /notes
  # method: POST request
  # cors: enabled CORS for browser cross domain api call
  # authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
        path: notes
        method: POST
        cors: true
        authorizer: aws_iam

  get:
  # defines and HTTP API endpoint that calls the main function in get.js
  # path: url path is /notes/{id}
  # method: GET request
    handler: get.main
    events:
      - http:
        path: notes/{id}
        method: get
        cors: true
        authorizer: aws_iam

  list:
  # defines an HTTP API endpoint that calls the main function in list.js
  # path: url path is /notes
  # method: GET request
    handler: list.main
    events:
      - http:
        path: notes
        method: get
        cors: true
        authorizer: aws_iam

  update:
  # defines an HTTP API endpoint that calls the main function in update.js
  # path: url path is /notes/{id}
  # method: PUT request
    handler: update.main
    events:
      - http:
        path: notes/{id}
        method: put
        cors: true
        authorizer: aws_iam

  delete:
  # define an HTTP API endpoint that calls the main function in delete.js
  # path: url path is /notes/{id}
  # method: DELETE request
    handler: delete.main
    events:
      - http:
        path: notes/{id}
        method: delete
        cors: true
        authorizer: aws_iam
  
  billing:
  # define an HTTP API endpoint that calls the main function in billing.js
  # path: the url path is /billing
  # method: POST request
    handler: billing.main
    events:
      - http:
        path: billing
        method: post
        cors: true
        authorizer: aws_iam